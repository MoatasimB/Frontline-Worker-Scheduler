"""add unique constraint to username

Revision ID: 9c719edd430f
Revises: 0272784a51d3
Create Date: 2024-11-21 21:44:27.752852

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9c719edd430f'
down_revision = '0272784a51d3'
branch_labels = None
depends_on = None


def upgrade():
    # Create a temporary table without the unique constraint
    op.create_table(
        'login_temp',
        sa.Column('id', sa.Integer(), primary_key=True, nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=True),
        sa.Column('password', sa.String(length=120), nullable=True),
        sa.Column('name', sa.String(length=80), nullable=False)
    )

    # Copy data to the new table
    op.execute('INSERT INTO login_temp (id, username, email, password, name) SELECT id, username, email, password, name FROM login')

    # Drop the old table
    op.drop_table('login')

    # Rename the temporary table to the original name
    op.rename_table('login_temp', 'login')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('login', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    # ### end Alembic commands ###
